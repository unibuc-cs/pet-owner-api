// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetOwner.Data;

namespace PetOwner.Migrations
{
    [DbContext(typeof(PetOwnerContext))]
    partial class PetOwnerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("PetOwner.Models.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpPoints")
                        .HasColumnType("int");

                    b.Property<int>("PetTokens")
                        .HasColumnType("int");

                    b.HasKey("AchievementId");

                    b.ToTable("Achievement");
                });

            modelBuilder.Entity("PetOwner.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpPoints")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("PetOwner.Models.Gamification", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("LevelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tokens")
                        .HasColumnType("int");

                    b.Property<int>("WeeklyExp")
                        .HasColumnType("int");

                    b.HasKey("LevelId");

                    b.ToTable("Gamifications");
                });

            modelBuilder.Entity("PetOwner.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InviteCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("PetOwner.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RecordStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ItemId");

                    b.HasIndex("GroupId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("PetOwner.Models.Pet", b =>
                {
                    b.Property<int>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("PetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Species")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Weigth")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PetId");

                    b.HasIndex("GroupId");

                    b.ToTable("Pet");
                });

            modelBuilder.Entity("PetOwner.Models.PetActivity", b =>
                {
                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Recurring")
                        .HasColumnType("bit");

                    b.Property<int>("RecurringInterval")
                        .HasColumnType("int");

                    b.HasKey("PetId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("PetActivity");
                });

            modelBuilder.Entity("PetOwner.Models.Tip", b =>
                {
                    b.Property<int>("TipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipId");

                    b.ToTable("Tips");
                });

            modelBuilder.Entity("PetOwner.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FCMToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VipId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LevelId")
                        .IsUnique();

                    b.HasIndex("VipId")
                        .IsUnique()
                        .HasFilter("[VipId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PetOwner.Models.UserAchievement", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AchievementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "AchievementId");

                    b.HasIndex("AchievementId");

                    b.ToTable("UserAchievement");
                });

            modelBuilder.Entity("PetOwner.Models.Vip", b =>
                {
                    b.Property<int>("VipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExpMultiplier")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VipId");

                    b.ToTable("Vip");
                });

            modelBuilder.Entity("PetOwner.Models.Item", b =>
                {
                    b.HasOne("PetOwner.Models.Group", "Group")
                        .WithMany("Items")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("PetOwner.Models.Pet", b =>
                {
                    b.HasOne("PetOwner.Models.Group", "Group")
                        .WithMany("Pets")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("PetOwner.Models.PetActivity", b =>
                {
                    b.HasOne("PetOwner.Models.Activity", "Activity")
                        .WithMany("PetActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetOwner.Models.Pet", "Pet")
                        .WithMany("PetActivities")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("PetOwner.Models.User", b =>
                {
                    b.HasOne("PetOwner.Models.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetOwner.Models.Gamification", "Level")
                        .WithOne("User")
                        .HasForeignKey("PetOwner.Models.User", "LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetOwner.Models.Vip", "Vip")
                        .WithOne("User")
                        .HasForeignKey("PetOwner.Models.User", "VipId");

                    b.Navigation("Group");

                    b.Navigation("Level");

                    b.Navigation("Vip");
                });

            modelBuilder.Entity("PetOwner.Models.UserAchievement", b =>
                {
                    b.HasOne("PetOwner.Models.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetOwner.Models.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetOwner.Models.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("PetOwner.Models.Activity", b =>
                {
                    b.Navigation("PetActivities");
                });

            modelBuilder.Entity("PetOwner.Models.Gamification", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("PetOwner.Models.Group", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Pets");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PetOwner.Models.Pet", b =>
                {
                    b.Navigation("PetActivities");
                });

            modelBuilder.Entity("PetOwner.Models.User", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("PetOwner.Models.Vip", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
